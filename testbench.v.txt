module tb_fft16_top;

    reg clk = 0;
    always #5 clk = ~clk;

    reg signed [15:0] in_real_0, in_real_1, in_real_2, in_real_3, 
                     in_real_4, in_real_5, in_real_6, in_real_7,
                     in_real_8, in_real_9, in_real_10, in_real_11,
                     in_real_12, in_real_13, in_real_14, in_real_15;
    reg signed [15:0] in_imag_0, in_imag_1, in_imag_2, in_imag_3, 
                     in_imag_4, in_imag_5, in_imag_6, in_imag_7,
                     in_imag_8, in_imag_9, in_imag_10, in_imag_11,
                     in_imag_12, in_imag_13, in_imag_14, in_imag_15;
    
    wire signed [15:0] out_real_0, out_real_1, out_real_2, out_real_3, 
                      out_real_4, out_real_5, out_real_6, out_real_7,
                      out_real_8, out_real_9, out_real_10, out_real_11,
                      out_real_12, out_real_13, out_real_14, out_real_15;
    wire signed [15:0] out_imag_0, out_imag_1, out_imag_2, out_imag_3, 
                      out_imag_4, out_imag_5, out_imag_6, out_imag_7,
                      out_imag_8, out_imag_9, out_imag_10, out_imag_11,
                      out_imag_12, out_imag_13, out_imag_14, out_imag_15;

    fft16_top dut (
        .clk(clk),
        .in_real_0(in_real_0), .in_real_1(in_real_1), .in_real_2(in_real_2), .in_real_3(in_real_3),
        .in_real_4(in_real_4), .in_real_5(in_real_5), .in_real_6(in_real_6), .in_real_7(in_real_7),
        .in_real_8(in_real_8), .in_real_9(in_real_9), .in_real_10(in_real_10), .in_real_11(in_real_11),
        .in_real_12(in_real_12), .in_real_13(in_real_13), .in_real_14(in_real_14), .in_real_15(in_real_15),
        .in_imag_0(in_imag_0), .in_imag_1(in_imag_1), .in_imag_2(in_imag_2), .in_imag_3(in_imag_3),
        .in_imag_4(in_imag_4), .in_imag_5(in_imag_5), .in_imag_6(in_imag_6), .in_imag_7(in_imag_7),
        .in_imag_8(in_imag_8), .in_imag_9(in_imag_9), .in_imag_10(in_imag_10), .in_imag_11(in_imag_11),
        .in_imag_12(in_imag_12), .in_imag_13(in_imag_13), .in_imag_14(in_imag_14), .in_imag_15(in_imag_15),
        .out_real_0(out_real_0), .out_real_1(out_real_1), .out_real_2(out_real_2), .out_real_3(out_real_3),
        .out_real_4(out_real_4), .out_real_5(out_real_5), .out_real_6(out_real_6), .out_real_7(out_real_7),
        .out_real_8(out_real_8), .out_real_9(out_real_9), .out_real_10(out_real_10), .out_real_11(out_real_11),
        .out_real_12(out_real_12), .out_real_13(out_real_13), .out_real_14(out_real_14), .out_real_15(out_real_15),
        .out_imag_0(out_imag_0), .out_imag_1(out_imag_1), .out_imag_2(out_imag_2), .out_imag_3(out_imag_3),
        .out_imag_4(out_imag_4), .out_imag_5(out_imag_5), .out_imag_6(out_imag_6), .out_imag_7(out_imag_7),
        .out_imag_8(out_imag_8), .out_imag_9(out_imag_9), .out_imag_10(out_imag_10), .out_imag_11(out_imag_11),
        .out_imag_12(out_imag_12), .out_imag_13(out_imag_13), .out_imag_14(out_imag_14), .out_imag_15(out_imag_15)
    );

    function real q15_to_float(input signed [15:0] val);
        q15_to_float = val / 32768.0;
    endfunction

    integer i;
    initial begin
        $dumpfile("dump.vcd");
        $dumpvars(0, tb_fft16_top);
        
        $display("=== Applying 16-point ramp input ===");

        // Initialize inputs
        for (i = 0; i < 16; i = i + 1) begin
            case(i)
                0: begin in_real_0 = (i + 1) * 4096; in_imag_0 = 0; end
                1: begin in_real_1 = (i + 1) * 4096; in_imag_1 = 0; end
                2: begin in_real_2 = (i + 1) * 4096; in_imag_2 = 0; end
                3: begin in_real_3 = (i + 1) * 4096; in_imag_3 = 0; end
                4: begin in_real_4 = (i + 1) * 4096; in_imag_4 = 0; end
                5: begin in_real_5 = (i + 1) * 4096; in_imag_5 = 0; end
                6: begin in_real_6 = (i + 1) * 4096; in_imag_6 = 0; end
                7: begin in_real_7 = (i + 1) * 4096; in_imag_7 = 0; end
                8: begin in_real_8 = (i + 1) * 4096; in_imag_8 = 0; end
                9: begin in_real_9 = (i + 1) * 4096; in_imag_9 = 0; end
                10: begin in_real_10 = (i + 1) * 4096; in_imag_10 = 0; end
                11: begin in_real_11 = (i + 1) * 4096; in_imag_11 = 0; end
                12: begin in_real_12 = (i + 1) * 4096; in_imag_12 = 0; end
                13: begin in_real_13 = (i + 1) * 4096; in_imag_13 = 0; end
                14: begin in_real_14 = (i + 1) * 4096; in_imag_14 = 0; end
                15: begin in_real_15 = (i + 1) * 4096; in_imag_15 = 0; end
            endcase
        end

        #400;

        $display("\n=== Final 16-point FFT Output (Natural Order) ===");
        $display("X[0] = %7d + j%7d  =>  (%.3f + j%.3f)", out_real_0, out_imag_0, q15_to_float(out_real_0), q15_to_float(out_imag_0));
        $display("X[1] = %7d + j%7d  =>  (%.3f + j%.3f)", out_real_1, out_imag_1, q15_to_float(out_real_1), q15_to_float(out_imag_1));
        $display("X[2] = %7d + j%7d  =>  (%.3f + j%.3f)", out_real_2, out_imag_2, q15_to_float(out_real_2), q15_to_float(out_imag_2));
        $display("X[3] = %7d + j%7d  =>  (%.3f + j%.3f)", out_real_3, out_imag_3, q15_to_float(out_real_3), q15_to_float(out_imag_3));
        $display("X[4] = %7d + j%7d  =>  (%.3f + j%.3f)", out_real_4, out_imag_4, q15_to_float(out_real_4), q15_to_float(out_imag_4));
        $display("X[5] = %7d + j%7d  =>  (%.3f + j%.3f)", out_real_5, out_imag_5, q15_to_float(out_real_5), q15_to_float(out_imag_5));
        $display("X[6] = %7d + j%7d  =>  (%.3f + j%.3f)", out_real_6, out_imag_6, q15_to_float(out_real_6), q15_to_float(out_imag_6));
        $display("X[7] = %7d + j%7d  =>  (%.3f + j%.3f)", out_real_7, out_imag_7, q15_to_float(out_real_7), q15_to_float(out_imag_7));
        $display("X[8] = %7d + j%7d  =>  (%.3f + j%.3f)", out_real_8, out_imag_8, q15_to_float(out_real_8), q15_to_float(out_imag_8));
        $display("X[9] = %7d + j%7d  =>  (%.3f + j%.3f)", out_real_9, out_imag_9, q15_to_float(out_real_9), q15_to_float(out_imag_9));
        $display("X[10] = %7d + j%7d  =>  (%.3f + j%.3f)", out_real_10, out_imag_10, q15_to_float(out_real_10), q15_to_float(out_imag_10));
        $display("X[11] = %7d + j%7d  =>  (%.3f + j%.3f)", out_real_11, out_imag_11, q15_to_float(out_real_11), q15_to_float(out_imag_11));
        $display("X[12] = %7d + j%7d  =>  (%.3f + j%.3f)", out_real_12, out_imag_12, q15_to_float(out_real_12), q15_to_float(out_imag_12));
        $display("X[13] = %7d + j%7d  =>  (%.3f + j%.3f)", out_real_13, out_imag_13, q15_to_float(out_real_13), q15_to_float(out_imag_13));
        $display("X[14] = %7d + j%7d  =>  (%.3f + j%.3f)", out_real_14, out_imag_14, q15_to_float(out_real_14), q15_to_float(out_imag_14));
        $display("X[15] = %7d + j%7d  =>  (%.3f + j%.3f)", out_real_15, out_imag_15, q15_to_float(out_real_15), q15_to_float(out_imag_15));

        $finish;
    end

endmodule